#!/bin/bash

#### LAUNCH-EPISODE
# This script takes care of a number of post-production tasks required for 
# releasing a new episode of our podcast, Lovey Dummies. It reads in three 
# parameters from the terminal:
#    1. Episode number
#    2. Episode title
#    3. Episode subtitle (usually who we interviewed for the episode)
#
# The script also assumes there are two files in PWD:
#    1. episode-#.wav (master file from Audacity)
#    2. episode-#.txt (chapter labels exported from Audacity)
#
# With these pre-requisites, LAUNCH-EPISODE will encode an OPUS audio file
# (good quality for the website) and an M4A audio file for the iTunes RSS feed,
# both automatically tagged with the appropriate metadata and artwork. It then
# converts the Audacity chapter labels (using the CHAPPY script) into a WebVTT
# file for chapter support on the website, as well as a specially formatted
# CHAPTERS file for embedding in the M4A audio file. It then offers to upload 
# the files to AWS S3.
#
# Finally, it copies the WebVTT file into the appropriate directory for our
# website, writes up the Jekyll front matter for the episode, and opens it in
# VIM for editing. Committing and pushing from git is left to the user ;)

EPNUM=$1
EPTITLE=$2
INTERVIEWEES=$3

ARTIST="Dave & Pearl"
ALBUM="Lovey Dummies"
YEAR=$(date +"%Y")
COPYRIGHT="CC-BY 4.0 $YEAR David Berg & Perlan Alatiit"
URL="http://loveydummies.com/about"
COVER="/path/to/cover.png"

LDDIR="/path/to/lovey.dummies/"

DATE=$(date +"%F %T %z")

EP="episode-$EPNUM"
MASTERFILE=$EP.wav
LABELFILE=$EP.txt
if [ ! -f "$MASTERFILE" ] || [ ! -f "$LABELFILE" ]; then
    echo "FATAL: episode-$EPNUM.wav or episode-$EPNUM.txt not found."
    exit
fi

OPUSFILE=$EP.opus
M4AFILE=$EP.m4a
M4ATEMPFILE=$EP-temp.m4a
CHAPTERSFILE=$EP.chapters
VTTFILE=$EP.vtt

echo "CREATING AUDIO FILES"
echo "Converting to opus..."
opusenc --bitrate 64 \
        --cvbr \
        --artist "$ARTIST" \
        --album "$ALBUM" \
        --title "$EPTITLE" \
        --comment TRACKNUMBER="$EPNUM" \
        --date "$YEAR" \
        --comment COPYRIGHT="$COPYRIGHT" \
        --comment CONTACT="$URL" \
        --picture "$COVER" \
        $MASTERFILE $OPUSFILE &>/dev/null && sync

echo "Converting to aac..."
ffmpeg -i $MASTERFILE \
       -c:a aac -strict -2 \
       -b:a 128k \
       $M4ATEMPFILE &>/dev/null && sync 

echo "Adding chapters..."
chappy $LABELFILE
MP4Box -add $M4ATEMPFILE -chap $CHAPTERSFILE $M4AFILE &>/dev/null && sync
mp4chaps --convert --chapter-qt $M4AFILE &>/dev/null && sync

echo "Writing tags..."
mp4tags -a "$ARTIST" \
        -A "$ALBUM" \
        -s "$EPTITLE" \
        -t "$EPNUM" \
        -y "$YEAR" \
        -C "$COPYRIGHT" \
        -c "$URL" \
        -B 1 \
        $M4AFILE &>/dev/null && sync
mp4art --add $COVER $M4AFILE &>/dev/null && sync
rm $M4ATEMPFILE
rm $CHAPTERSFILE

echo "Ready to upload? Check your files before you say yes!"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) 
            aws s3 cp $M4AFILE s3://lovey-dummies/$M4AFILE --acl public-read;
            aws s3 cp $OPUSFILE s3://lovey-dummies/$OPUSFILE --acl public-read;
            aws s3 cp $VTTFILE s3://lovey-dummies/$VTTFILE --acl public-read;
            break;;
        No ) break;;
    esac
done

clear
cd $LDDIR
echo "Copying VTT file..."
cp "$VTTFILE" "chapters/$VTTFILE"

echo "Preparing entry for website..."
LENGTH=$(stat -c%s $M4AFILE)
TOTALSEC=`printf %.0f $(mp4info "$M4AFILE" \
        | grep audio \
        | cut -f3 \
        | cut -d ',' -f2 \
        | cut -d ' ' -f2)`
MIN=$(bc <<< "$TOTALSEC / 60")
SEC=$(bc <<< "$TOTALSEC % 60")
DURATION="$MIN:$SEC"

POSTFILE=`echo "$(date +"%F")-$(echo $EPTITLE \
        | sed -e 's/ /-/g' -e "s/[\!\@\#\\\$\%\^\&\*\(\)\',?]//g" \
        | tr '[:upper:]' '[:lower:]').md"`

cd _posts/episode && > $POSTFILE
echo "---" >> $POSTFILE
echo "layout:    post" >> $POSTFILE
echo "title:    \"$EPTITLE\"" >> $POSTFILE
echo "subtitle:  $INTERVIEWEES" >> $POSTFILE
echo "date:      $DATE" >> $POSTFILE
echo "itunes:    $M4AFILE" >> $POSTFILE
echo "opus:      $OPUSFILE" >> $POSTFILE
echo "chapters:  $VTTFILE" >> $POSTFILE
echo "length:    $LENGTH" >> $POSTFILE
echo "duration: \"$DURATION\"" >> $POSTFILE
echo -e "---\n\n" >> $POSTFILE

read -p "Hit [ENTER] to type in the show notes"
vim +13 $POSTFILE

clear
echo "Be sure to add, commit, and push the new show live!"
echo "All done!"

